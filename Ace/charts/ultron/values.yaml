service: # HTTP API
  tribe: datascience
  squad: fraud
  env: dev # Set on deploy

  # We do not use DataDog anyway, and currently (1.4.0) it results to an invalid generated YAML ("env:" is doubled)
  datadog:
    enabled: false

  image:
    tag: latest # Set on deploy
    repository: 457710302499.dkr.ecr.eu-west-2.amazonaws.com/ace/api
  containerPort: 3000 # The service runs by a non-root user, so it cannot listen on port 80 (see Dockerfile)

  environmentVars:
    STAGE:
      value: dev # Set on deploy
    NEW_RELIC_APP_NAME:
      value: ace-dev.dhhmena.com
  envFrom:
    - secretRef:
        name: ace-ultron-secrets

  externalSecret:
    enabled: true
    name: ace-ultron-secrets
    vaultRole: external-secrets
    vaultMountPoint: kubernetes-talabat-dev-main-cluster
    data:
      - name: NEW_RELIC_LICENSE_KEY
        key: secret/data/shared/newrelic/dev
        property: license_key
      - name: OPENAI_API_KEY
        key: secret/data/datascience/ace/openai/qa
        property: api_key
      - name: PGHOST
        key: secret/data/datascience/ace/db/ro/qa
        property: hostname
      - name: PGUSER
        key: secret/data/datascience/ace/db/ro/qa
        property: username
      - name: PGPASSWORD
        key: secret/data/datascience/ace/db/ro/qa
        property: password
      - name: PGDATABASE
        key: secret/data/datascience/ace/db/ro/qa
        property: dbname

  resources:
    limits:
      memory: 4Gi
    requests:
      cpu: 250m
      memory: 4Gi

  startupProbe:
    # See https://deliveryhero.slack.com/archives/CLZ106T0Q/p1683711563096479 on how this override works
    tcpSocket: null
    httpGet:
      path: /readyz
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 10
  readinessProbe:
    httpGet:
      path: /readyz
      port: 3000
    timeoutSeconds: 1
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 1
  livenessProbe:
    tcpSocket:
      port: 3000
    timeoutSeconds: 1
    periodSeconds: 15
    failureThreshold: 3

  serviceAccount:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::690772145391:role/talabat-dev-datascience-ace"

  horizontalPodAutoscaler:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 65

  # Vertical Pod autoscaling can recommend values for CPU and memory requests and limits,
  # see https://goldilocks-dashboard.dhhmena.com/dashboard
  verticalPodAutoscaler:
    enabled: true

  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
  podAnnotations:
    sidecar.istio.io/inject: "true"
  istio:
    enabled: true
    ingress:
      routes:
        mainPort: 80
        match:
          - host: ace-dev.dhhmena.com
            prefix: "/ultron/"
    holdApplicationUntilProxyStarts: true
    resources:
      enabled: true
      limits:
        memory: 1024Mi
      requests:
        cpu: 100m
        memory: 128Mi
    retries:
      attempts: 15
      retryOn: gateway-error,connect-failure,refused-stream
    trafficPolicy:
      loadBalancer:
        simple: LEAST_CONN
